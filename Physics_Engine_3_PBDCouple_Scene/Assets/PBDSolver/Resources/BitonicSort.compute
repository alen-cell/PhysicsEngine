
#define THREADS 128

#define BITONIC_BLOCK_SIZE 512
#define TRANSPOSE_BLOCK_SIZE 16

int Level;
int LevelMask;
int Width;
int Height;



RWStructuredBuffer<int2> Data;
StructuredBuffer<int2> Input;
//RWStructuredBuffer<float2>Debug;

groupshared int2 shared_data[BITONIC_BLOCK_SIZE];
groupshared int2 transpose_shared_data[TRANSPOSE_BLOCK_SIZE * TRANSPOSE_BLOCK_SIZE];

#pragma kernel BitonicSort
[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void BitonicSort(int3 Gid : SV_GroupID, int3 DTid : SV_DispatchThreadID, int3 GTid : SV_GroupThreadID, int GI : SV_GroupIndex)
{
// Load shared data
	shared_data[GI] = Data[DTid.x];
	GroupMemoryBarrierWithGroupSync();

	// Sort the shared data
	for (int j = Level >> 1; j > 0; j >>= 1)
	{

		/*// for(unsigned int i=2; i<=Num; i<<=1){
		for (unsigned int j = i >> 1; j > 0; j >>= 1) {
			unsigned int tid_comp = tid ^ j;
			if (tid_comp > tid) {
				if ((tid & i) == 0) { //ascending
					if (shared_arr[tid] > shared_arr[tid_comp]) {
						swap(shared_arr[tid], shared_arr[tid_comp]);
					}
				}
				else { //desending
					if (shared_arr[tid] < shared_arr[tid_comp]) {
						swap(shared_arr[tid], shared_arr[tid_comp]);
					}
				}
			}
			__syncthreads();
		}
		*/
		//LevelMask=GI----->asending 
		int2 result = ((shared_data[GI & ~j].x <= shared_data[GI | j].x) == (bool)(LevelMask & DTid.x)) ? shared_data[GI ^ j] : shared_data[GI];
		GroupMemoryBarrierWithGroupSync();
		shared_data[GI] = result;
		GroupMemoryBarrierWithGroupSync();
	}

	// Store shared data
	Data[DTid.x] = shared_data[GI];
	

}

#pragma kernel MatrixTranspose
[numthreads(TRANSPOSE_BLOCK_SIZE, TRANSPOSE_BLOCK_SIZE, 1)]
void MatrixTranspose(int3 Gid : SV_GroupID, int3 DTid : SV_DispatchThreadID, int3 GTid : SV_GroupThreadID, int GI : SV_GroupIndex)
{
	transpose_shared_data[GI] = Input[DTid.y * Width + DTid.x];
	GroupMemoryBarrierWithGroupSync();
	int2 XY = DTid.yx - GTid.yx + GTid.xy;
	Data[XY.y * Height + XY.x] = transpose_shared_data[GTid.x * TRANSPOSE_BLOCK_SIZE + GTid.y];

	//Debug[DTid.x] = Data[XY.y * Height + XY.x];
}


#pragma kernel Fill
[numthreads(THREADS, 1, 1)]
void Fill(int DTid : SV_DispatchThreadID)
{
	if (DTid < Width)
		Data[DTid] = Input[DTid];
	else
		Data[DTid] = 0x7FFFFFFF;
	
	//Debug[DTid] = Data[DTid]; 

}

#pragma kernel Copy
[numthreads(THREADS, 1, 1)]
void Copy(int DTid : SV_DispatchThreadID)
{
	if (DTid < Width)
		Data[DTid] = Input[DTid];
		//Debug[DTid] = Data[DTid];
}